
package przelicznikWalut;

import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.*;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import org.jsoup.Connection;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;


/**
 * 
 * @author Maksymilian Szczypkowski
 * @version 1.1.1 22/09/2020
 * Icons made by Freepik from www.flaticon.com
 * 
 */
public class PrzelicznikWalut extends javax.swing.JFrame {
    /**
    * Date of last currencies rate update
    */
    private String currenciesRateDateOfUpdate = "";
    /**
    * Text printed in error label, used in method <code>Run()</code> in class <code>ErrorMessage</code>
    */
    private String errorLabelMessageText = "";
    /**
     * List of currencies readed from file "Currencies rate.txt"
     */
    private ArrayList<Currency> currencies = new ArrayList<Currency>();
    /**
     * Code value of currency chosen as input
     */
    private double codeValueIn;
    /**
     * Buy rate of currency chosen as input
     */
    private double buyRateIn;
    /**
     * Sell rate of currency chosen as output
     */
    private double sellRateOut;
    /**
     * Creates new form PrzelicznikWalut
     */
    public PrzelicznikWalut() {
        initComponents(); // Run automaticly creathed method which creates frame components
        this.addWindowListener(new WindowAdapter(){
            @Override
            public void windowOpened(WindowEvent e) 
            {
                Thread updateRateThread = new Thread(new UpdateRateRunnable());
                updateRateThread.start();
                try 
                {
                    updateRateThread.join();
                    readExchangeRate();
                    updateComboBoxes();
                } 
                catch (InterruptedException ex) 
                {
                    System.out.println(ex.getMessage());
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        updateButton = new javax.swing.JButton();
        rateDateLabel = new javax.swing.JLabel();
        errorLabel = new javax.swing.JLabel();
        currencyInComboBox = new javax.swing.JComboBox<>();
        currencyOutComboBox = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        currencyRateTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        currencyRateTable2 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        currencyInField = new javax.swing.JTextField();
        currencyOutField = new javax.swing.JTextField();
        panelArrow = new ArrowPanel();
        switchButton = new javax.swing.JButton();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Kalkulator walut");
        setIconImage(new ImageIcon("Cash-icon.png").getImage());
        setResizable(false);

        updateButton.setText("Aktualizuj");
        updateButton.setToolTipText("Pobierz aktualne kursy walut");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        rateDateLabel.setText("Kursy walut NBP z dnia: XXXX-XX-XX");
        rateDateLabel.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        errorLabel.setToolTipText("");
        errorLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        errorLabel.setMinimumSize(new java.awt.Dimension(150, 14));

        currencyInComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                currencyInComboBoxActionPerformed(evt);
            }
        });

        currencyOutComboBox.setMinimumSize(new java.awt.Dimension(200, 22));
        currencyOutComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                currencyOutComboBoxActionPerformed(evt);
            }
        });

        currencyRateTable1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        currencyRateTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                { new Double(0.0),  new Double(0.0)}
            },
            new String [] {
                "Kupno", "Sprzedaż"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        currencyRateTable1.setRequestFocusEnabled(false);
        currencyRateTable1.setRowSelectionAllowed(false);
        currencyRateTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        currencyRateTable1.setShowGrid(true);
        jScrollPane1.setViewportView(currencyRateTable1);

        currencyRateTable2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        currencyRateTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                { new Double(0.0),  new Double(0.0)}
            },
            new String [] {
                "Kupno", "Sprzedaż"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        currencyRateTable2.setRequestFocusEnabled(false);
        currencyRateTable2.setRowSelectionAllowed(false);
        currencyRateTable2.setShowGrid(true);
        jScrollPane2.setViewportView(currencyRateTable2);

        jLabel2.setText("Mam:");

        jLabel3.setText("Chcę kupić:");

        currencyInField.setText("0.0");
        currencyInField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                currencyInFieldActionPerformed(evt);
            }
        });
        currencyInField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                currencyInFieldKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                currencyInFieldKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                currencyInFieldKeyTyped(evt);
            }
        });

        currencyOutField.setEditable(false);
        currencyOutField.setBackground(new java.awt.Color(255, 255, 255));
        currencyOutField.setText("0.0");

        javax.swing.GroupLayout panelArrowLayout = new javax.swing.GroupLayout(panelArrow);
        panelArrow.setLayout(panelArrowLayout);
        panelArrowLayout.setHorizontalGroup(
            panelArrowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panelArrowLayout.setVerticalGroup(
            panelArrowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );

        switchButton.setIcon(new ImageIcon("swap.png"));
        switchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                switchButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rateDateLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(55, 55, 55)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(currencyInComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(currencyInField, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(124, 124, 124)
                                .addComponent(jLabel2)))
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 231, Short.MAX_VALUE)
                                .addComponent(updateButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(panelArrow, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(switchButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(currencyOutField, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(currencyOutComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                                        .addGap(55, 55, 55))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addGap(109, 109, 109))))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(errorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(switchButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(currencyInComboBox)
                    .addComponent(currencyOutComboBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(currencyOutField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(currencyInField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(panelArrow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)))
                .addComponent(errorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateButton)
                    .addComponent(rateDateLabel))
                .addContainerGap())
        );

        errorLabel.getAccessibleContext().setAccessibleName("errorLabel");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        Thread updateRateThread = new Thread(new UpdateRateRunnable());
        updateRateThread.start();
        try 
        {
            updateRateThread.join();
            readExchangeRate();
            updateComboBoxes();
            calculateAndShowOutputValue();
        } 
        catch (InterruptedException ex) 
        {
            System.out.println(ex.getMessage());
        }
        
    }//GEN-LAST:event_updateButtonActionPerformed

    private void currencyInComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_currencyInComboBoxActionPerformed
         if(((JComboBox)(evt.getSource())).getItemCount() != 0)
        {
            int index = (((JComboBox)(evt.getSource())).getSelectedIndex());
            currencyRateTable1.setValueAt(currencies.get(index).getCurrencyBuyRate(), 0, 0);
            currencyRateTable1.setValueAt(currencies.get(index).getCurrencySellRate(), 0, 1);
            codeValueIn = currencies.get(index).getCurrencyCodeValue();
            buyRateIn = currencies.get(index).getCurrencyBuyRate();
            calculateAndShowOutputValue();
        }
    }//GEN-LAST:event_currencyInComboBoxActionPerformed

    private void currencyOutComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_currencyOutComboBoxActionPerformed
        if(((JComboBox)(evt.getSource())).getItemCount() != 0)
        {
            int index = (((JComboBox)(evt.getSource())).getSelectedIndex());
            currencyRateTable2.setValueAt(currencies.get(index).getCurrencyBuyRate(), 0, 0);
            currencyRateTable2.setValueAt(currencies.get(index).getCurrencySellRate(), 0, 1);
            sellRateOut = currencies.get(index).getCurrencySellRate();
            calculateAndShowOutputValue();
        }
    }//GEN-LAST:event_currencyOutComboBoxActionPerformed

    private void currencyInFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_currencyInFieldActionPerformed

    }//GEN-LAST:event_currencyInFieldActionPerformed

    private void currencyInFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_currencyInFieldKeyTyped
        if(isFirstDotInText(evt.getKeyChar(), currencyInField.getText()) && currencyInField.getText().isEmpty())
            evt.consume();
        else if(!isNumber(evt.getKeyChar()) && !isFirstDotInText(evt.getKeyChar(), currencyInField.getText()))
            evt.consume();
    }//GEN-LAST:event_currencyInFieldKeyTyped

    private void currencyInFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_currencyInFieldKeyPressed
        //Checking if pasted text is correct
        if(evt.isControlDown() && evt.getKeyCode() == KeyEvent.VK_V)
        {
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            DataFlavor flavor = DataFlavor.stringFlavor;
            String clipboardString = "";
            try 
            {
                clipboardString = (String)clipboard.getData(flavor);
            } 
            catch (UnsupportedFlavorException ex) 
            {
                System.out.println("It is not a String");
            } 
            catch (IOException ex)
            {
                System.out.println("Input/output error");
            }
            //Checking if format of pasted text is correct and matches already written number
            if(clipboardString.contains(".") && currencyInField.getText().contains("."))
                evt.consume();
            else if(currencyInField.getText().isEmpty() && clipboardString.indexOf('.') == 0)
                evt.consume();
            else
            {
                int dotCounter = 0;
                for(int i = 0; i < clipboardString.length(); i++)
                {
                    if(!isNumber(clipboardString.charAt(i)))
                    {
                        if(clipboardString.charAt(i) != '.')
                        {
                            evt.consume();
                            break;
                        }
                        dotCounter++;
                        if(dotCounter > 1)
                        {
                            evt.consume();
                            break;
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_currencyInFieldKeyPressed

    private void currencyInFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_currencyInFieldKeyReleased
        calculateAndShowOutputValue();
    }//GEN-LAST:event_currencyInFieldKeyReleased

    private void switchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_switchButtonActionPerformed
        int selectedIndexIn = currencyInComboBox.getSelectedIndex();
        int selectedIndexOut = currencyOutComboBox.getSelectedIndex();
        currencyInComboBox.setSelectedIndex(selectedIndexOut);
        currencyOutComboBox.setSelectedIndex(selectedIndexIn);
    }//GEN-LAST:event_switchButtonActionPerformed
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");//(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PrzelicznikWalut.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PrzelicznikWalut.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PrzelicznikWalut.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PrzelicznikWalut.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PrzelicznikWalut().setVisible(true);
            }
        });
    }
    private void calculateAndShowOutputValue()
    {
        if(!currencyInField.getText().isEmpty())
        {
            double inputValue = Double.parseDouble(currencyInField.getText());
            double outputValue = ((inputValue/codeValueIn)*buyRateIn)/sellRateOut;
            currencyOutField.setText("" + outputValue);
        }
    }
    private boolean isNumber(char typedChar)
    {
        if(typedChar >= '0' && typedChar <= '9')
            return true;
        return false;
    }
    private boolean isFirstDotInText(char typedChar, String checkedText)
    {
        if(typedChar == '.' && !checkedText.contains("."))
            return true;
        return false;
    }
    private void updateComboBoxes()
    {
        int inputCurrencySelectedIndex = 0; 
        int outputCurrencySelectedIndex = 0;
        Object inputCurrencySelected = null;
        Object outputCurrencySelected = null;
        boolean inputFlag = false;
        boolean outputFlag = false;
        if(currencyInComboBox.getItemCount() != 0)
        {
            inputCurrencySelected = currencyInComboBox.getSelectedItem();
            inputFlag = true;
        }
        if(currencyOutComboBox.getItemCount() != 0)
        {
            outputCurrencySelected = currencyOutComboBox.getSelectedItem();
            outputFlag = true;
        }
        currencyInComboBox.removeAllItems();
        currencyOutComboBox.removeAllItems();
        for(int i = 0; i < currencies.size(); i++)
        {
            currencyInComboBox.addItem(currencies.get(i).getCurrencyName());
            currencyOutComboBox.addItem(currencies.get(i).getCurrencyName());
        }
        if(inputFlag)
            currencyInComboBox.setSelectedItem(inputCurrencySelected);
        else
            currencyInComboBox.setSelectedIndex(inputCurrencySelectedIndex);
        if(outputFlag)
            currencyOutComboBox.setSelectedItem(outputCurrencySelected);
        else
            currencyOutComboBox.setSelectedIndex(outputCurrencySelectedIndex);
    }
    private void readExchangeRate()
        {
            Scanner reader;
            try 
            {
                reader = new Scanner(new BufferedReader(new FileReader("Exchange rate.txt")));
                currencies.clear();
                currencies.add(new Currency("polski złoty (PLN)", 1, 1.0, 1.0));
                if(reader.hasNext())
                    currenciesRateDateOfUpdate = reader.nextLine();
                while(reader.hasNextLine())
                {
                    String temp1 = reader.nextLine();
                    String temp = reader.nextLine();
                    String currencyName = temp1 + " (" + temp.substring(temp.indexOf(" ")+1) + ")";
                    int codeValue = Integer.parseInt(temp.substring(0,temp.indexOf(" ")));
                    temp = reader.nextLine().replace(',', '.');
                    double buyRate = Double.parseDouble(temp);
                    temp = reader.nextLine().replace(',', '.');
                    double sellRate = Double.parseDouble(temp);
                    currencies.add(new Currency(currencyName, codeValue, buyRate, sellRate));
                }
                rateDateLabel.setText(rateDateLabel.getText().substring(0, 24) + currenciesRateDateOfUpdate);
            } 
            catch (FileNotFoundException ex) 
            {
                int dialogResponse = JOptionPane.showConfirmDialog(rootPane, "Plik z kursami walut jest niedostępny", "Brak pliku", JOptionPane.OK_CANCEL_OPTION, JOptionPane.ERROR_MESSAGE);
                if(dialogResponse == 0 || dialogResponse == 2 || dialogResponse == -1)
                    System.exit(1);
            }    
        }
    private class UpdateRateRunnable implements Runnable
    {
        Thread errorMessageThread = new Thread(new ErrorMessage());
        @Override
        public void run() 
        {
            updateExchangeRate();
        }
        private void updateExchangeRate()
        {
            Connection connect = Jsoup.connect("https://www.nbp.pl/home.aspx?f=/kursy/kursyc.html");
            try 
            {
                Document documentCurrencies = connect.get();
                Elements currencies1 = documentCurrencies.select("td.bgt1.left");
                Elements values1 = documentCurrencies.select("td.bgt1.right");
                Elements currencies2 = documentCurrencies.select("td.bgt2.left");
                Elements values2 = documentCurrencies.select("td.bgt2.right");
                Element heading = documentCurrencies.selectFirst("p.nag");
                PrintWriter writer = new PrintWriter(new BufferedWriter(new FileWriter("Exchange rate.txt")));
                writer.println(heading.text().substring(heading.text().lastIndexOf('-')-7));
                for(int i = 0; i < currencies1.size(); i++)
                {
                    writer.println(currencies1.get(i).text());
                    writer.println(values1.get((i*3)).text());
                    writer.println(values1.get((i*3) + 1).text());
                    writer.println(values1.get((i*3) + 2).text());
                }
                for(int i = 0; i < currencies2.size(); i++)
                {
                    writer.println(currencies2.get(i).text());
                    writer.println(values2.get((i*3)).text());
                    writer.println(values2.get((i*3) + 1).text());
                    writer.println(values2.get((i*3) + 2).text());
                }
                writer.close();
            } 
            catch (IOException ex) 
            {
                errorLabelMessageText = "Błąd aktualizacji kursów";
                errorMessageThread.start();
            }
        }
    }
    class ErrorMessage implements Runnable
    {
        @Override
        public void run() 
        {
            synchronized(updateButton)
            {
                updateButton.setEnabled(false);
                errorLabel.setText(errorLabelMessageText);
                try 
                {
                    Thread.sleep(3000);
                } 
                catch (InterruptedException ex) 
                {
                    System.out.println(ex.getMessage());
                }
                errorLabel.setText("");
                updateButton.setEnabled(true);
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> currencyInComboBox;
    private javax.swing.JTextField currencyInField;
    private javax.swing.JComboBox<String> currencyOutComboBox;
    private javax.swing.JTextField currencyOutField;
    private javax.swing.JTable currencyRateTable1;
    private javax.swing.JTable currencyRateTable2;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel panelArrow;
    private javax.swing.JLabel rateDateLabel;
    private javax.swing.JButton switchButton;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
}

